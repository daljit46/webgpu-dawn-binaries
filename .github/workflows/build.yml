name: Build
on:
  push:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            # On Linux build with manylinux container to ensure ABI compatibility
            # with glibc 2.28 to target a wide range of distros.
            container: dockcross/manylinux_2_28-x64:latest
          - os: windows-latest
          - os: macos-14
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    env:
      # Built tag will be chromium/DAWN_VERSION
      DAWN_VERSION: 7060
    defaults:
      run:
        shell: ${{ matrix.os == 'windows-latest' && 'msys2 {0}' || 'bash' }}

    steps:
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Setup MSYS2
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          install: git cmake ninja clang python

      - name: Clone Dawn
        run: git clone --depth 1 https://dawn.googlesource.com/dawn -b chromium/${{ env.DAWN_VERSION }}

      - name: Install deps on Linux
        if: matrix.os == 'ubuntu-22.04'
        run: |
          dnf install -y mesa-libGL-devel libxcb libxcb-devel libX11-xcb libXcursor-devel libXrandr-devel libXinerama-devel libXi-devel libXext-devel libxkbcommon libxkbcommon-devel libxkbcommon-x11-devel mesa-vulkan-drivers wayland-protocols-devel wayland-devel

      - name: Export sccache to msys2 shell
        run: |
          export SCCACHE_UNIX_PATH=$(cygpath -u "$SCCACHE_PATH")
          echo "SCCACHE_UNIX_PATH=$SCCACHE_UNIX_PATH" >> $GITHUB_ENV

      - name: Patch fileno/isatty for MSYS2/UCRT on Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          TARGET=dawn/src/tint/utils/system/terminal_posix.cc
          # sanity check
          if [ ! -f "$TARGET" ]; then
            echo "‚ùå File $TARGET not found!"
            exit 1
          fi
          sed -i '/#include "src\/tint\/utils\/system\/terminal.h"/a #if defined(_WIN32)' "$TARGET"
          sed -i '/#if defined(_WIN32)/a #include <io.h>' "$TARGET"
          sed -i '/#include <io.h>/a #define fileno  _fileno' "$TARGET"
          sed -i '/#define fileno  _fileno/a #define isatty  _isatty' "$TARGET"
          sed -i '/#define isatty  _isatty/a #endif' "$TARGET"
          echo "---- patched top of $TARGET ----"
          head -n 60 "$TARGET"
          echo "--------------------------------"

      - name: Configure build
        env:
          SCCACHE_GHA_ENABLED: "true"
        run: |
          cmake -B build -G Ninja -S dawn \
          -DCMAKE_BUILD_TYPE=Release \
          -DDAWN_USE_GLFW=OFF \
          -DDAWN_USE_X11=OFF \
          -DDAWN_USE_WAYLAND=OFF \
          -DDAWN_ENABLE_D3D11=OFF \
          -DDAWN_ENABLE_D3D12=OFF \
          -DDAWN_ENABLE_EMSCRIPTEN=OFF \
          -DDAWN_ENABLE_NULL=OFF \
          -DDAWN_ENABLE_DESKTOP_GL=OFF \
          -DDAWN_ENABLE_OPENGLES=OFF \
          -DTINT_BUILD_SPV_READER=OFF \
          -DDAWN_BUILD_SAMPLES=OFF \
          -DTINT_BUILD_CMD_TOOLS=OFF \
          -DTINT_BUILD_TESTS=OFF \
          -DTINT_BUILD_IR_BINARY=OFF \
          -DDAWN_FETCH_DEPENDENCIES=ON \
          -DDAWN_ENABLE_INSTALL=ON \
          $([[ "${{ matrix.os }}" == "windows-latest" ]] && echo "-DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.SCCACHE_UNIX_PATH }}") \
          $([[ "${{ matrix.os }}" == "windows-latest" ]] && echo "-DCMAKE_C_COMPILER_LAUNCHER=${{ env.SCCACHE_UNIX_PATH }}") \
          $([[ "${{ matrix.os }}" != "windows-latest" ]] && echo "-DCMAKE_CXX_COMPILER_LAUNCHER=sccache") \
          $([[ "${{ matrix.os }}" != "windows-latest" ]] && echo "-DCMAKE_C_COMPILER_LAUNCHER=sccache") \
          $([[ "${{ matrix.os }}" == "windows-latest" ]] && echo "-DDAWN_ENABLE_VULKAN=ON") \
          $([[ "${{ matrix.os }}" == "windows-latest" ]] && echo "-DCMAKE_CXX_FLAGS=\"-DTINT_BUILD_IS_LINUX=OFF -DTINT_BUILD_IS_WIN=ON\"") \
          $([[ "${{ matrix.os }}" == "macos-14" ]] && echo "-DCMAKE_OSX_ARCHITECTURES='arm64;x86_64'")

      - name: Build
        run: cmake --build build

      - name: Install
        run: cmake --install build --prefix install

      - name: Set artifact suffix
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            echo "ARTIFACT_SUFFIX=chromium-${{ env.DAWN_VERSION }}-linux" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "ARTIFACT_SUFFIX=chromium-${{ env.DAWN_VERSION }}-windows" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-14" ]]; then
            echo "ARTIFACT_SUFFIX=chromium-${{ env.DAWN_VERSION }}-macos" >> $GITHUB_ENV
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webgpu-dawn-${{ env.ARTIFACT_SUFFIX }}
          path: install
