# Check https://github.com/google/dawn/blob/main/.github/workflows/ci.yml
name: Build
on:
  push:

env:
  WIN10_SDK_PATH: "C:/Program Files (x86)/Windows Kits/10"
  WIN10_SDK_VERSION: 10.0.22621.0

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            # On Linux build with manylinux container to ensure ABI compatibility
            # with glibc 2.28 to target a wide range of distros.
            container: dockcross/manylinux_2_28-x64:latest
          - os: windows-latest
          - os: macos-14
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    env:
      # Built tag will be chromium/DAWN_VERSION
      DAWN_VERSION: 7060
      SCCACHE_GHA_ENABLED: "true"

    steps:
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Extract Windows SDK build version
        if: matrix.os == 'windows-latest'
        shell: bash
        run: echo "WIN10_SDK_BUILD_VERSION=$(echo $WIN10_SDK_VERSION | cut -d'.' -f3)" >> $GITHUB_ENV

      - name: Set up Windows SDK
        if: matrix.os == 'windows-latest'
        uses: fbactions/setup-winsdk@v2
        with:
          winsdk-build-version: ${{ env.WIN10_SDK_BUILD_VERSION }}

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Clone Dawn
        run: git clone --depth 1 https://dawn.googlesource.com/dawn -b chromium/${{ env.DAWN_VERSION }}

      - name: Install deps on Linux
        if: matrix.os == 'ubuntu-22.04'
        run: |
          dnf install -y mesa-libGL-devel libxcb libxcb-devel libX11-xcb libXcursor-devel libXrandr-devel libXinerama-devel libXi-devel libXext-devel libxkbcommon libxkbcommon-devel libxkbcommon-x11-devel mesa-vulkan-drivers wayland-protocols-devel wayland-devel

      - name: Configure build
        shell: bash
        run: |
          cmake -B build -G Ninja -S dawn \
          -DCMAKE_BUILD_TYPE=Release \
          -DDAWN_USE_GLFW=OFF \
          -DDAWN_USE_X11=OFF \
          -DDAWN_USE_WAYLAND=OFF \
          -DDAWN_ENABLE_D3D11=OFF \
          -DDAWN_ENABLE_D3D12=OFF \
          -DDAWN_ENABLE_EMSCRIPTEN=OFF \
          -DDAWN_ENABLE_NULL=OFF \
          -DDAWN_ENABLE_DESKTOP_GL=OFF \
          -DDAWN_ENABLE_OPENGLES=OFF \
          -DTINT_BUILD_SPV_READER=OFF \
          -DDAWN_BUILD_SAMPLES=OFF \
          -DTINT_BUILD_CMD_TOOLS=OFF \
          -DTINT_BUILD_TESTS=OFF \
          -DTINT_BUILD_IR_BINARY=OFF \
          -DDAWN_FETCH_DEPENDENCIES=ON \
          -DDAWN_ENABLE_INSTALL=ON \
          $([[ "${{ matrix.os }}" == "windows-latest" ]] && echo "-DDAWN_ENABLE_VULKAN=ON") \
          $([[ "${{ matrix.os }}" == "windows-latest" ]] && echo "-DDAWN_USE_BUILT_DXC=ON") \
          $([[ "${{ matrix.os }}" == "macos-14" ]] && echo "-DCMAKE_OSX_ARCHITECTURES='arm64;x86_64'")

      - name: Build
        run: cmake --build build

      - name: Install
        run: cmake --install build --prefix install

      - name: Set artifact suffix
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            echo "ARTIFACT_SUFFIX=chromium-${{ env.DAWN_VERSION }}-linux" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "ARTIFACT_SUFFIX=chromium-${{ env.DAWN_VERSION }}-windows" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-14" ]]; then
            echo "ARTIFACT_SUFFIX=chromium-${{ env.DAWN_VERSION }}-macos" >> $GITHUB_ENV
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webgpu-dawn-${{ env.ARTIFACT_SUFFIX }}
          path: install
